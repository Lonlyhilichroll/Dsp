# -*- coding: utf-8 -*-
"""Copy of class_dsp.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MJSG0nlxdx0Fq_NFVrNcddlUTu1pg00M

1.Python program to add two numbers.
"""

a=12
b=13
c=a+b
print(c)

"""2.Maximum of two numbers in python"""

def find_maximum(num1, num2):
    if num1 > num2:
        return num1
    else:
        return num2
num1 = float(input("Enter the first number: "))
num2 = float(input("Enter the second number: "))

maximum_number = find_maximum(num1, num2)
print("The maximum of", num1, "and", num2, "is:", maximum_number)

"""3.Python program for factorial of a number"""

def factorial_iterative(n):
    result = 1
    for i in range(1, n + 1):
        result *= i
    return result

number = int(input("Enter a number: "))

result_iterative = factorial_iterative(number)
print(f"The factorial of {number} (iterative) is: {result_iterative}")

"""4.Python program for simple interest"""

def calculate_simple_interest(principal, rate, time):
    interest = (principal * rate * time) / 100
    return interest

principal_amount = float(input("Enter the principal amount: "))
interest_rate = float(input("Enter the rate of interest: "))
time_in_years = float(input("Enter the time in years: "))

simple_interest = calculate_simple_interest(principal_amount, interest_rate, time_in_years)
print(f"The simple interest is: {simple_interest}")

"""5.python program for compound interest"""

def calculate_compound_interest(principal, rate, time, compound_frequency):
    rate_decimal = rate / 100

    compound_interest = principal * (1 + rate_decimal / compound_frequency) ** (compound_frequency * time) - principal
    return compound_interest

principal_amount = float(input("Enter the principal amount: "))
interest_rate = float(input("Enter the annual interest rate: "))
time_in_years = float(input("Enter the time in years: "))
compound_frequency = int(input("Enter the number of times interest is compounded per year: "))

compound_interest = calculate_compound_interest(principal_amount, interest_rate, time_in_years, compound_frequency)
print(f"The compound interest is: {compound_interest}")

"""6.Python program to check Armstrong number"""

def is_armstrong_number(number):

    num_str = str(number)
    num_digits = len(num_str)

    sum_of_digits = sum(int(digit) ** num_digits for digit in num_str)

    return sum_of_digits == number

num = int(input("Enter a number: "))

if is_armstrong_number(num):
    print(f"{num} is an Armstrong number.")
else:
    print(f"{num} is not an Armstrong number.")

"""7.Python program to find area of a circle"""

import math

def calculate_circle_area(radius):
    area = math.pi * radius ** 2
    return area

radius = float(input("Enter the radius of the circle: "))

circle_area = calculate_circle_area(radius)
print(f"The area of the circle with radius {radius} is: {circle_area}")

"""8.Python program to print all the prime numbers in an intervel"""

def is_prime(number):
    if number <= 1:
        return False
    for i in range(2, int(number**0.5) + 1):
        if number % i == 0:
            return False
    return True

def print_primes_in_interval(start, end):
    print(f"Prime numbers in the interval [{start}, {end}]:")
    for num in range(start, end + 1):
        if is_prime(num):
            print(num, end=" ")

start_num = int(input("Enter the start of the interval: "))
end_num = int(input("Enter the end of the interval: "))

print_primes_in_interval(start_num, end_num)

"""9.Python program to check whether a number is prime or not"""

def is_prime(number):
    if number <= 1:
        return False
    for i in range(2, int(number**0.5) + 1):
        if number % i == 0:
            return False
    return True

num = int(input("Enter a number: "))

if is_prime(num):
    print(f"{num} is a prime number.")
else:
    print(f"{num} is not a prime number.")

"""10.Python program for n-th fibonacci number"""

def fibonacci_recursive(n):
    if n <= 1:
        return n
    else:
        return fibonacci_recursive(n - 1) + fibonacci_recursive(n - 2)

n = int(input("Enter the value of n: "))

result_recursive = fibonacci_recursive(n)
print(f"The {n}-th Fibonacci number (recursive) is: {result_recursive}")

"""11.Python program to check how a given number is a fibonacci number"""

import math

def is_perfect_square(num):
    root = int(math.sqrt(num))
    return num == root * root

def is_fibonacci_number(number):
    if number < 0:
        return False

    return is_perfect_square(5 * number * number + 4) or is_perfect_square(5 * number * number - 4)

num = int(input("Enter a number: "))

if is_fibonacci_number(num):
    print(f"{num} is a Fibonacci number.")
else:
    print(f"{num} is not a Fibonacci number.")

"""12.Python program for n-th multiple of a number in fibonacci series"""

def find_nth_multiple_in_fibonacci(number, n):
    if n <= 0:
        return "Invalid input: n should be a positive integer."

    fib_sequence = [0, 1]
    count = 2

    while count <= n:
        current_fibonacci = fib_sequence[-1] + fib_sequence[-2]

        if current_fibonacci % number == 0:
            count += 1

        fib_sequence.append(current_fibonacci)

    return f"The {n}-th multiple of {number} in the Fibonacci series is: {fib_sequence[-1]}"


num = int(input("Enter the number for which you want to find the multiple: "))
nth = int(input("Enter the value of n: "))

result = find_nth_multiple_in_fibonacci(num, nth)
print(result)

"""13.Python program to print ASCII value of a character"""

character = input("Enter a character: ")

if len(character) == 1:
    # Printing the ASCII value of the character
    ascii_value = ord(character)
    print(f"The ASCII value of '{character}' is: {ascii_value}")
else:
    print("Please enter a single character.")

"""14.Python program for sum of squares of first n natural numbers"""

def sum_of_squares(n):
    return sum(i**2 for i in range(1, n+1))

n = int(input("Enter the value of n: "))

result = sum_of_squares(n)
print(f"The sum of squares of the first {n} natural numbers is: {result}")

"""15.Python program for cubes sum of first n natural numbers"""

def sum_of_cubes(n):
    return sum(i**3 for i in range(1, n+1))

n = int(input("Enter the value of n: "))

result = sum_of_cubes(n)
print(f"The sum of cubes of the first {n} natural numbers is: {result}")

"""# Array programs

1.Python program to find sum of an array
"""

def array_sum(arr):
    total_sum = 0
    for element in arr:
        total_sum += element
    return total_sum

arr = list(map(int, input("Enter the elements of the array separated by spaces: ").split()))

result = array_sum(arr)
print(f"The sum of the array is: {result}")

"""2.Python program to find largest element in an array"""

def find_largest_element(arr):
    if not arr:
        return "Array is empty, no largest element."

    largest_element = arr[0]
    for element in arr:
        if element > largest_element:
            largest_element = element

    return largest_element

arr = list(map(int, input("Enter the elements of the array separated by spaces: ").split()))

result = find_largest_element(arr)
print(f"The largest element in the array is: {result}")

"""3.Python program for array rotation"""

def rotate_left(arr, d):
    n = len(arr)
    d = d % n
    return arr[d:] + arr[:d]

def rotate_right(arr, d):
    n = len(arr)
    d = d % n
    return arr[-d:] + arr[:-d]

arr = list(map(int, input("Enter the elements of the array separated by spaces: ").split()))
rotation_count = int(input("Enter the number of positions to rotate: "))

rotated_left = rotate_left(arr, rotation_count)
rotated_right = rotate_right(arr, rotation_count)

print(f"Original array: {arr}")
print(f"Array after left rotation by {rotation_count} positions: {rotated_left}")
print(f"Array after right rotation by {rotation_count} positions: {rotated_right}")

"""4.Python program for reversal algorithm for array rotation"""

def reverse_array(arr, start, end):
    while start < end:
        arr[start], arr[end] = arr[end], arr[start]
        start += 1
        end -= 1

def rotate_array_reversal(arr, rotation_count):
    n = len(arr)
    rotation_count = rotation_count % n

    reverse_array(arr, 0, rotation_count - 1)

    reverse_array(arr, rotation_count, n - 1)

    reverse_array(arr, 0, n - 1)

arr = list(map(int, input("Enter the elements of the array separated by spaces: ").split()))
rotation_count = int(input("Enter the number of positions to rotate: "))

rotate_array_reversal(arr, rotation_count)
print(f"Array after rotation using reversal algorithm: {arr}")

"""5.Python program to split the array and add the first part to the end"""

def split_and_add(arr, position):
    n = len(arr)
    position = position % n

    result = arr[position:] + arr[:position]

    return result

arr = list(map(int, input("Enter the elements of the array separated by spaces: ").split()))
split_position = int(input("Enter the position to split the array: "))

result = split_and_add(arr, split_position)
print(f"Array after splitting and adding the first part to the end: {result}")

"""6.Python program to find remainder of array multiplication divided by n"""

def remainder_of_array_multiplication(arr, n):
    product = 1

    for num in arr:
        product = (product * num) % n

    return product % n

arr = list(map(int, input("Enter the elements of the array separated by spaces: ").split()))
n = int(input("Enter the value of n: "))

result = remainder_of_array_multiplication(arr, n)
print(f"The remainder of array multiplication divided by {n} is: {result}")

"""7.Python program to check if given array is monotonic"""

def is_monotonic(arr):
    increasing = decreasing = True

    for i in range(len(arr) - 1):
        if arr[i] > arr[i + 1]:
            increasing = False
            break

    for i in range(len(arr) - 1):
        if arr[i] < arr[i + 1]:
            decreasing = False
            break

    return increasing or decreasing

arr = list(map(int, input("Enter the elements of the array separated by spaces: ").split()))

if is_monotonic(arr):
    print("The array is monotonic.")
else:
    print("The array is not monotonic.")

"""# List programs

1.Python program to interchange 1st and last element in a list
"""

def interchange_first_last(lst):
    if len(lst) >= 2:
        lst[0], lst[-1] = lst[-1], lst[0]
    else:
        print("List should have at least two elements for interchange.")

lst = list(map(int, input("Enter the elements of the list separated by spaces: ").split()))

interchange_first_last(lst)
print("List after interchanging first and last elements:", lst)

"""2.Python program to swap two elements in a list"""

def swap_elements(lst, index1, index2):
    if 0 <= index1 < len(lst) and 0 <= index2 < len(lst):
        lst[index1], lst[index2] = lst[index2], lst[index1]
    else:
        print("Invalid indices. Ensure indices are within the list bounds.")

lst = list(map(int, input("Enter the elements of the list separated by spaces: ").split()))

index1 = int(input("Enter the first index to swap: "))
index2 = int(input("Enter the second index to swap: "))

swap_elements(lst, index1, index2)
print("List after swapping elements:", lst)

"""3.Python| Ways to find length of a list"""

my_list = [1, 2, 3, 4, 5]
length = len(my_list)
print("Length of the list:", length)

my_list = [1, 2, 3, 4, 5]
count = 0
for _ in my_list:
    count += 1
print("Length of the list:", count)

import numpy as np

my_list = [1, 2, 3, 4, 5]
length = np.size(my_list)
print("Length of the list:", length)

"""4.Python| Ways to check if element exist in a list"""

my_list = [1, 2, 3, 4, 5]
element_to_check = 3

if element_to_check in my_list:
    print(f"{element_to_check} exists in the list.")
else:
    print(f"{element_to_check} does not exist in the list.")

my_list = [1, 2, 3, 4, 5]
element_to_check = 6

if element_to_check not in my_list:
    print(f"{element_to_check} does not exist in the list.")
else:
    print(f"{element_to_check} exists in the list.")

my_list = [1, 2, 3, 4, 5]
element_to_check = 3

if my_list.count(element_to_check) > 0:
    print(f"{element_to_check} exists in the list.")
else:
    print(f"{element_to_check} does not exist in the list.")

"""5.Different ways to clear a list in python"""

my_list = [1, 2, 3, 4, 5]
my_list.clear()
print("List after clearing:", my_list)

my_list = [1, 2, 3, 4, 5]
my_list = []
print("List after clearing:", my_list)

my_list = [1, 2, 3, 4, 5]
del my_list[:]
print("List after clearing:", my_list)

"""6.Python| Reversing a list"""

my_list = [1, 2, 3, 4, 5]
my_list.reverse()
print("Reversed list:", my_list)

my_list = [1, 2, 3, 4, 5]
reversed_list = my_list[::-1]
print("Reversed list:", reversed_list)

my_list = [1, 2, 3, 4, 5]
reversed_list = [x for x in reversed(my_list)]
print("Reversed list:", reversed_list)

"""7.Python program to find the sum of elements in a list"""

def sum_of_elements(lst):
    return sum(lst)

my_list = list(map(int, input("Enter the elements of the list separated by spaces: ").split()))

result = sum_of_elements(my_list)
print("Sum of elements in the list:", result)

"""8.python| Multiply all numbers in a list"""

def multiply_list_elements(lst):
    result = 1
    for num in lst:
        result *= num
    return result

my_list = list(map(int, input("Enter the elements of the list separated by spaces: ").split()))

result = multiply_list_elements(my_list)
print("Product of all numbers in the list:", result)

"""9.Python program to find smallest number in a list"""

def find_smallest_number(lst):
    if not lst:
        return "List is empty, no smallest number."

    smallest_number = min(lst)
    return smallest_number

my_list = list(map(int, input("Enter the elements of the list separated by spaces: ").split()))

result = find_smallest_number(my_list)
print("Smallest number in the list:", result)

"""10.python program to find the largest number in a list"""

def find_largest_number(lst):
    if not lst:
        return "List is empty, no largest number."

    largest_number = max(lst)
    return largest_number

my_list = list(map(int, input("Enter the elements of the list separated by spaces: ").split()))

result = find_largest_number(my_list)
print("Largest number in the list:", result)

"""11.Python program to find the second largest number in a list"""

def find_second_largest(lst):
    if len(lst) < 2:
        return "List should have at least two numbers to find the second largest."

    largest = second_largest = float('-inf')

    for num in lst:
        if num > largest:
            second_largest = largest
            largest = num
        elif num > second_largest and num != largest:
            second_largest = num

    if second_largest == float('-inf'):
        return "There is no second largest number in the list."

    return second_largest

my_list = list(map(int, input("Enter the elements of the list separated by spaces: ").split()))

result = find_second_largest(my_list)
print("Second largest number in the list:", result)

"""12.Python program to find N th largest element from a list"""

def find_nth_largest(lst, n):
    if len(lst) < n:
        return f"List should have at least {n} numbers to find the Nth largest."

    sorted_list = sorted(lst, reverse=True)

    nth_largest = sorted_list[n - 1]

    return nth_largest

my_list = list(map(int, input("Enter the elements of the list separated by spaces: ").split()))
n = int(input("Enter the value of N: "))

result = find_nth_largest(my_list, n)
print(f"{n}th largest element in the list:", result)

"""13.Python program to print even number in a list"""

def print_even_numbers(lst):
    even_numbers = [num for num in lst if num % 2 == 0]
    if even_numbers:
        print("Even numbers in the list:", even_numbers)
    else:
        print("There are no even numbers in the list.")

my_list = list(map(int, input("Enter the elements of the list separated by spaces: ").split()))

print_even_numbers(my_list)

"""14.Python program to print odd numbers in a list"""

def print_odd_numbers(lst):
    odd_numbers = [num for num in lst if num % 2 != 0]
    if odd_numbers:
        print("Odd numbers in the list:", odd_numbers)
    else:
        print("There are no odd numbers in the list.")

my_list = list(map(int, input("Enter the elements of the list separated by spaces: ").split()))

print_odd_numbers(my_list)

"""15.Python program to print all even numbers in a range"""

def print_even_numbers_in_range(start, end):
    even_numbers = [num for num in range(start, end + 1) if num % 2 == 0]
    if even_numbers:
        print("Even numbers in the range:", even_numbers)
    else:
        print("There are no even numbers in the specified range.")

start_range = int(input("Enter the start of the range: "))
end_range = int(input("Enter the end of the range: "))

print_even_numbers_in_range(start_range, end_range)

"""16.Python program to print all the odd numbers in a range"""

def print_odd_numbers_in_range(start, end):
    odd_numbers = [num for num in range(start, end + 1) if num % 2 != 0]
    if odd_numbers:
        print("Odd numbers in the range:", odd_numbers)
    else:
        print("There are no odd numbers in the specified range.")

start_range = int(input("Enter the start of the range: "))
end_range = int(input("Enter the end of the range: "))

print_odd_numbers_in_range(start_range, end_range)

"""17.Python program to print positive numbers in a list"""

def print_positive_numbers(lst):
    positive_numbers = [num for num in lst if num > 0]
    if positive_numbers:
        print("Positive numbers in the list:", positive_numbers)
    else:
        print("There are no positive numbers in the list.")

my_list = list(map(int, input("Enter the elements of the list separated by spaces: ").split()))

print_positive_numbers(my_list)

"""18.Python program to print negative numbers in a list"""

def print_negative_numbers(lst):
    negative_numbers = [num for num in lst if num < 0]
    if negative_numbers:
        print("Negative numbers in the list:", negative_numbers)
    else:
        print("There are no negative numbers in the list.")

my_list = list(map(int, input("Enter the elements of the list separated by spaces: ").split()))

print_negative_numbers(my_list)

"""19.Python program to print all the positive numbers in a range"""

def print_positive_numbers_in_range(start, end):
    positive_numbers = [num for num in range(start, end + 1) if num > 0]
    if positive_numbers:
        print("Positive numbers in the range:", positive_numbers)
    else:
        print("There are no positive numbers in the specified range.")

start_range = int(input("Enter the start of the range: "))
end_range = int(input("Enter the end of the range: "))

print_positive_numbers_in_range(start_range, end_range)

"""20.Python program to print all the negtive numbers in a range"""

def print_odd_numbers_in_range(start, end):
    odd_numbers = [num for num in range(start, end + 1) if num % 2 != 0]
    if odd_numbers:
        print("Odd numbers in the range:", odd_numbers)
    else:
        print("There are no odd numbers in the specified range.")

start_range = int(input("Enter the start of the range: "))
end_range = int(input("Enter the end of the range: "))

print_odd_numbers_in_range(start_range, end_range)

"""21.Remove multiple element from a list"""

def remove_elements(lst, elements_to_remove):
    updated_list = [item for item in lst if item not in elements_to_remove]
    return updated_list

my_list = [1, 2, 3, 4, 5, 6, 7]
elements_to_remove = [2, 4, 6]
result_list = remove_elements(my_list, elements_to_remove)
print("List after removal:", result_list)

"""22.Remove empty list from a list"""

def remove_empty_lists(lst):
    updated_list = [sublist for sublist in lst if sublist]
    return updated_list


my_list = [1, [], 3, [], 5, [], 7, []]
result_list = remove_empty_lists(my_list)
print("List after removal of empty lists:", result_list)

"""23.Python| Cloning or copying a list"""

original_list = [1, 2, 3, 4, 5]
copied_list = list(original_list)

print("Original List:", original_list)
print("Copied List:", copied_list)

original_list = [1, 2, 3, 4, 5]
copied_list = original_list[:]

copied_list = original_list.copy()

print("Original List:", original_list)
print("Copied List:", copied_list)

"""24.Python| Count occurance of an element in a list"""

def count_occurrences(lst, element):
    return lst.count(element)

my_list = [1, 2, 3, 4, 2, 5, 2, 6]
element_to_count = 2
occurrences = count_occurrences(my_list, element_to_count)

print(f"The element {element_to_count} occurs {occurrences} times in the list.")

"""25.Python| Remove empty tuples from a list"""

def remove_empty_tuples(lst):
    updated_list = [tpl for tpl in lst if tpl]
    return updated_list

my_list = [(1, 2), (), (3, 4), (), (5, 6), ()]
result_list = remove_empty_tuples(my_list)
print("List after removal of empty tuples:", result_list)

"""26.Python| To print duplicates from a list of integers"""

from collections import Counter

# Function to print duplicates from a list using Counter
def print_duplicates(lst):
    counter = Counter(lst)
    duplicates = [item for item, count in counter.items() if count > 1]

    if duplicates:
        print("Duplicates in the list:", duplicates)
    else:
        print("No duplicates found in the list.")

# Example usage
my_list = [1, 2, 3, 4, 2, 5, 6, 3, 4]
print_duplicates(my_list)

"""27.Python program to find cumulative sum of a list"""

def cumulative_sum(lst):
    cum_sum = 0
    cum_sum_list = []

    for num in lst:
        cum_sum += num
        cum_sum_list.append(cum_sum)

    return cum_sum_list

my_list = [1, 2, 3, 4, 5]
result = cumulative_sum(my_list)
print("Original List:", my_list)
print("Cumulative Sum List:", result)

"""28.Python| Sum of number of digits in list"""

def sum_of_digits_count(lst):
    total_digits_count = 0

    for num in lst:
        digits_count = len(str(abs(num)))
        total_digits_count += digits_count

    return total_digits_count

my_list = [12, 345, 6789, 98765]
result = sum_of_digits_count(my_list)
print("List:", my_list)
print("Sum of the number of digits:", result)

"""29.Break a list into chunks of N in python"""

def chunk_list(lst, N):
    chunked_list = [lst[i:i+N] for i in range(0, len(lst), N)]
    return chunked_list

my_list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
chunk_size = 3
result = chunk_list(my_list, chunk_size)
print("Original List:", my_list)
print(f"List broken into chunks of {chunk_size}:", result)

"""30.Python| Sort the values of first list using second list"""

def sort_first_list_by_second(first_list, second_list):
    zipped_lists = zip(second_list, first_list)
    sorted_pairs = sorted(zipped_lists)
    sorted_first_list = [item[1] for item in sorted_pairs]
    return sorted_first_list

list1 = [3, 1, 4, 2]
list2 = ['apple', 'orange', 'banana', 'grape']

sorted_list1 = sort_first_list_by_second(list1, list2)
print("Original List 1:", list1)
print("Original List 2:", list2)
print("Sorted List 1 using List 2:", sorted_list1)

"""# matrix programs

1.Python program to add two matrices
"""

def add_matrices(matrix1, matrix2):
    result_matrix = []

    if len(matrix1) == len(matrix2) and len(matrix1[0]) == len(matrix2[0]):
        for i in range(len(matrix1)):
            row = []
            for j in range(len(matrix1[0])):
                row.append(matrix1[i][j] + matrix2[i][j])
            result_matrix.append(row)
        return result_matrix
    else:
        return "Matrices must have the same dimensions for addition."

matrix1 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
matrix2 = [[9, 8, 7], [6, 5, 4], [3, 2, 1]]

result = add_matrices(matrix1, matrix2)

if isinstance(result, list):
    print("Matrix 1:")
    for row in matrix1:
        print(row)

    print("\nMatrix 2:")
    for row in matrix2:
        print(row)

    print("\nResultant Matrix after addition:")
    for row in result:
        print(row)
else:
    print(result)

"""2.Python program to multiply two matrices"""

def multiply_matrices(matrix1, matrix2):
    result_matrix = []

    if len(matrix1[0]) == len(matrix2):
        for i in range(len(matrix1)):
            row = []
            for j in range(len(matrix2[0])):
                element = sum(matrix1[i][k] * matrix2[k][j] for k in range(len(matrix2)))
                row.append(element)
            result_matrix.append(row)
        return result_matrix
    else:
        return "Matrices cannot be multiplied. The number of columns in the first matrix must be equal to the number of rows in the second matrix."

matrix1 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
matrix2 = [[9, 8, 7], [6, 5, 4], [3, 2, 1]]

result = multiply_matrices(matrix1, matrix2)

if isinstance(result, list):
    print("Matrix 1:")
    for row in matrix1:
        print(row)

    print("\nMatrix 2:")
    for row in matrix2:
        print(row)

    print("\nResultant Matrix after multiplication:")
    for row in result:
        print(row)
else:
    print(result)

"""3. Python program for matrix product"""

def matrix_product(matrix1, matrix2):
    if len(matrix1[0]) != len(matrix2):
        return "Matrices cannot be multiplied. The number of columns in the first matrix must be equal to the number of rows in the second matrix."

    result_matrix = []
    for i in range(len(matrix1)):
        row = []
        for j in range(len(matrix2[0])):
            element = sum(matrix1[i][k] * matrix2[k][j] for k in range(len(matrix2)))
            row.append(element)
        result_matrix.append(row)

    return result_matrix

matrix1 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
matrix2 = [[9, 8, 7], [6, 5, 4], [3, 2, 1]]

result = matrix_product(matrix1, matrix2)

if isinstance(result, list):
    print("Matrix 1:")
    for row in matrix1:
        print(row)

    print("\nMatrix 2:")
    for row in matrix2:
        print(row)

    print("\nResultant Matrix after multiplication:")
    for row in result:
        print(row)
else:
    print(result)

"""4.Adding and subtracting matrices in python"""

def add_matrices(matrix1, matrix2):
    if len(matrix1) != len(matrix2) or len(matrix1[0]) != len(matrix2[0]):
        return "Matrices must have the same dimensions for addition."

    result_matrix = []
    for i in range(len(matrix1)):
        row = [matrix1[i][j] + matrix2[i][j] for j in range(len(matrix1[0]))]
        result_matrix.append(row)

    return result_matrix

def subtract_matrices(matrix1, matrix2):
    if len(matrix1) != len(matrix2) or len(matrix1[0]) != len(matrix2[0]):
        return "Matrices must have the same dimensions for subtraction."

    result_matrix = []
    for i in range(len(matrix1)):
        row = [matrix1[i][j] - matrix2[i][j] for j in range(len(matrix1[0]))]
        result_matrix.append(row)

    return result_matrix

matrix1 = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
matrix2 = [[9, 8, 7], [6, 5, 4], [3, 2, 1]]

result_addition = add_matrices(matrix1, matrix2)

result_subtraction = subtract_matrices(matrix1, matrix2)

print("Matrix 1:")
for row in matrix1:
    print(row)

print("\nMatrix 2:")
for row in matrix2:
    print(row)

print("\nResultant Matrix after addition:")
for row in result_addition:
    print(row)

print("\nResultant Matrix after subtraction:")
for row in result_subtraction:
    print(row)

"""5.Transpose a matrix in single line in python"""

matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]

transposed_matrix = [list(row) for row in zip(*matrix)]

print("Original Matrix:")
for row in matrix:
    print(row)

print("\nTransposed Matrix:")
for row in transposed_matrix:
    print(row)

"""6.Python| matrix creation of n*n"""

def create_matrix(n):
    return [[0 for _ in range(n)] for _ in range(n)]

n = 3
matrix = create_matrix(n)

for row in matrix:
    print(row)

"""7.Python| get kth column of matrix"""

def get_kth_column(matrix, k):
    return [row[k] for row in matrix]

matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
k = 1

kth_column = get_kth_column(matrix, k)

print(f"The {k}th column of the matrix is:", kth_column)

"""8.Python | vertical concatenation in matrix"""

def concatenate_matrices_vertically(matrix1, matrix2):
    return matrix1 + matrix2

matrix1 = [[1, 2, 3], [4, 5, 6]]
matrix2 = [[7, 8, 9], [10, 11, 12]]

result = concatenate_matrices_vertically(matrix1, matrix2)

print("Matrix 1:")
for row in matrix1:
    print(row)

print("\nMatrix 2:")
for row in matrix2:
    print(row)

print("\nVertically Concatenated Matrix:")
for row in result:
    print(row)

"""# String program

1.Python program to check if a string is palindrome or not
"""

def is_palindrome(s):
    s = s.replace(" ", "").lower()

    return s == s[::-1]

user_input = input("Enter a string: ")

if is_palindrome(user_input):
    print(f"{user_input} is a palindrome.")
else:
    print(f"{user_input} is not a palindrome.")

"""2.Python program to check if a string is symmetrical or palindrome"""

def is_symmetrical(s):
    s = s.replace(" ", "").lower()

    return s == s[::-1]

user_input = input("Enter a string: ")

if is_symmetrical(user_input):
    print(f"{user_input} is symmetrical and a palindrome.")
else:
    print(f"{user_input} is not symmetrical or not a palindrome.")

"""3.Reverse words in a given String in Python"""

def reverse_words(input_string):
    words = input_string.split()

    reversed_words = words[::-1]

    reversed_string = ' '.join(reversed_words)

    return reversed_string

user_input = input("Enter a string: ")

result = reverse_words(user_input)
print("Reversed words:", result)

"""4.Ways to remove i'th character from string in python"""

def remove_ith_character(input_string, i):
    result = input_string[:i] + input_string[i+1:]
    return result

original_string = "example"
index_to_remove = 3
result = remove_ith_character(original_string, index_to_remove)
print("String after removing i'th character:", result)

"""5.Python| Check if a substring is present in a given string"""

def is_substring_present(original_string, substring):
    return substring in original_string

main_string = "Hello, World!"
substring_to_check = "World"

if is_substring_present(main_string, substring_to_check):
    print(f"'{substring_to_check}' is present in the string.")
else:
    print(f"'{substring_to_check}' is not present in the string.")

"""6.Python-Words frequency in string shorthands"""

def word_frequency(string):
    words = string.split()

    word_counts = {}

    for word in words:
        word_counts[word] = word_counts.get(word, 0) + 1

    return word_counts

input_string = "the quick brown fox jumps over the lazy dog the dog barks loudly"
result = word_frequency(input_string)

for word, count in result.items():
    print(f"'{word}': {count} times")

"""7.Python-Convert Snake case to Pascal case"""

def snake_to_pascal(snake_case_string):
    words = snake_case_string.split('_')

    pascal_case_words = [word.capitalize() for word in words]

    pascal_case_string = ''.join(pascal_case_words)

    return pascal_case_string

snake_case_input = "hello_world_example"
pascal_case_output = snake_to_pascal(snake_case_input)
print(f"Snake case: {snake_case_input}")
print(f"Pascal case: {pascal_case_output}")

"""8.Find length of a string in Python(4 ways)"""

string = "Hello, World!"
length = len(string)
print("Length using len():", length)

string = "Hello, World!"
count = 0

for char in string:
    count += 1

print("Length using a loop:", count)

string = "Hello, World!"
length = string.count('')
print("Length using str.count():", length - 1)

string = "Hello, World!"
length = sum(1 for _ in range(len(string)))
print("Length using range and len():", length)

"""9.Python program to print even length words in a string"""

def print_even_length_words(input_string):
    words = input_string.split()

    print("Even-length words:")
    for word in words:
        if len(word) % 2 == 0:
            print(word)

user_input = input("Enter a string: ")
print_even_length_words(user_input)

"""10.Python program to accept all the strings which contains all vowels"""

def contains_all_vowels(input_string):
    input_string = input_string.lower()

    return all(vowel in input_string for vowel in 'aeiou')

user_input = input("Enter a string: ")

if contains_all_vowels(user_input):
    print(f"The string '{user_input}' contains all vowels.")
else:
    print(f"The string '{user_input}' does not contain all vowels.")

"""11.Python| Count the Number of matching characters in a pair of string"""

def count_matching_characters(str1, str2):
    set_str1 = set(str1)
    set_str2 = set(str2)

    common_characters = set_str1.intersection(set_str2)

    count = len(common_characters)

    return count, common_characters

string1 = "hello"
string2 = "world"

matching_count, matching_characters = count_matching_characters(string1, string2)

print(f"Number of matching characters: {matching_count}")
print(f"Matching characters: {', '.join(matching_characters)}")

"""12.	Remove all duplicates from a given string in Python"""

def remove_duplicates(input_string):
    unique_characters = set()

    result_string = ""
    for char in input_string:
        if char not in unique_characters:
            unique_characters.add(char)
            result_string += char

    return result_string

user_input = input("Enter a string: ")
result = remove_duplicates(user_input)

print(f"String after removing duplicates: {result}")

"""13.	Python – Least Frequent Character in String"""

def least_frequent_character(input_string):
    char_frequency = {}

    for char in input_string:
        char_frequency[char] = char_frequency.get(char, 0) + 1

    least_frequent_char = min(char_frequency, key=char_frequency.get)

    return least_frequent_char

user_input = input("Enter a string: ")
result = least_frequent_character(user_input)

print(f"The least frequent character is: {result}")

"""14.	Python | Maximum frequency character in String"""

def max_frequency_character(input_string):
    char_frequency = {}

    for char in input_string:
        char_frequency[char] = char_frequency.get(char, 0) + 1

    max_frequency_char = max(char_frequency, key=char_frequency.get)

    return max_frequency_char

user_input = input("Enter a string: ")
result = max_frequency_character(user_input)

print(f"The character with the maximum frequency is: {result}")

"""15.	Python | Program to check if a string contains any special character"""

def contains_special_character(input_string):
    for char in input_string:
        if not char.isalnum():
            return True

    return False

user_input = input("Enter a string: ")

if contains_special_character(user_input):
    print("The string contains special characters.")
else:
    print("The string does not contain any special characters.")

"""16.	Generating random strings until a given string is generated"""

import random
import string

def generate_random_string(length):
    return ''.join(random.choice(string.ascii_letters + string.digits) for _ in range(length))

def generate_until_match(target_string):
    attempts = 0
    while True:
        random_string = generate_random_string(len(target_string))
        attempts += 1

        if random_string == target_string:
            return random_string, attempts

target_string = "Hello123"
result, num_attempts = generate_until_match(target_string)

print(f"Target String: {target_string}")
print(f"Generated String: {result}")
print(f"Number of Attempts: {num_attempts}")

"""17.	Find words which are greater than given length k"""

def find_words_greater_than_length(input_string, k):
    words = input_string.split()

    result_words = [word for word in words if len(word) > k]

    return result_words

user_input = input("Enter a string: ")
k = int(input("Enter the minimum length (k): "))

result = find_words_greater_than_length(user_input, k)

if result:
    print(f"Words greater than length {k}: {', '.join(result)}")
else:
    print(f"No words found greater than length {k}")

"""18.	Python program for removing i-th character from a string"""

def remove_ith_character(input_string, i):
    if 0 <= i < len(input_string):
        result_string = input_string[:i] + input_string[i+1:]
        return result_string
    else:
        return "Invalid index"

user_input = input("Enter a string: ")
index_to_remove = int(input("Enter the index to remove: "))

result = remove_ith_character(user_input, index_to_remove)

print(f"String after removing i-th character: {result}")

"""19.	Python program to split and join a string"""

def split_and_join(input_string):
    words = input_string.split()

    result_string = ' '.join(words)

    return words, result_string

user_input = input("Enter a string: ")

split_words, joined_string = split_and_join(user_input)

print("Original String:", user_input)
print("Split Words:", split_words)
print("Joined String:", joined_string)

"""20.	Python | Check if a given string is binary string or not"""

def is_binary_string(input_string):
    return all(char in '01' for char in input_string)

user_input = input("Enter a string: ")

if is_binary_string(user_input):
    print("The given string is a binary string.")
else:
    print("The given string is not a binary string.")

"""21.	Python program to find uncommon words from two Strings"""

def find_uncommon_words(string1, string2):
    words1 = set(string1.split())
    words2 = set(string2.split())

    uncommon_words = words1.symmetric_difference(words2)

    return uncommon_words

string1 = "hello world example"
string2 = "world is beautiful"

result = find_uncommon_words(string1, string2)

print(f"String 1: {string1}")
print(f"String 2: {string2}")
print(f"Uncommon words: {', '.join(result)}")

"""22.	Python – Replace duplicate Occurrence in String"""

def replace_duplicate_occurrence(input_string, replacement_char='_'):
    char_count = {}
    result_string = ''

    for char in input_string:
        char_count[char] = char_count.get(char, 0) + 1

        if char_count[char] > 1:
            result_string += replacement_char
        else:
            result_string += char

    return result_string

user_input = input("Enter a string: ")

result = replace_duplicate_occurrence(user_input)

print("Original String:", user_input)
print("String with replaced duplicates:", result)

"""23.	Python – Replace multiple words with K"""

def replace_multiple_words(input_string, words_to_replace, replacement_char='K'):
    for word in words_to_replace:
        input_string = input_string.replace(word, replacement_char)

    return input_string

user_input = input("Enter a string: ")

words_to_replace = ["apple", "banana", "orange"]

result = replace_multiple_words(user_input, words_to_replace)

print("Original String:", user_input)
print("String with replaced words:", result)

"""24.	Python | Permutation of a given string using inbuilt function"""

from itertools import permutations

def generate_permutations(input_string):
    perms = permutations(input_string)

    perm_list = [''.join(perm) for perm in perms]

    return perm_list

user_input = input("Enter a string: ")

result = generate_permutations(user_input)

print(f"Permutations of '{user_input}':")
for perm in result:
    print(perm)

"""25.	Python | Check for URL in a String"""

import re

def contains_url(input_string):
    url_pattern = re.compile(r'https?://\S+|www\.\S+')

    match = url_pattern.search(input_string)

    return bool(match)

user_input = input("Enter a string: ")

if contains_url(user_input):
    print("The string contains a URL.")
else:
    print("The string does not contain a URL.")

"""26.Execute a String of Code in Python"""

code_to_execute = """
def greet(name):
    print(f"Hello, {name}!")

greet("John")
"""

try:
    exec(code_to_execute)
except Exception as e:
    print(f"An error occurred: {e}")

"""27.	String slicing in Python to rotate a string"""

def rotate_string(input_string, shift):
    shift %= len(input_string)

    rotated_string_left = input_string[shift:] + input_string[:shift]

    rotated_string_right = input_string[-shift:] + input_string[:-shift]

    return rotated_string_left, rotated_string_right

user_input = input("Enter a string: ")
shift_value = int(input("Enter the number of positions to shift: "))

left_rotation, right_rotation = rotate_string(user_input, shift_value)

print(f"Original String: {user_input}")
print(f"Left Rotation: {left_rotation}")
print(f"Right Rotation: {right_rotation}")

"""28.	String slicing in Python to check if a string can become empty by recursive deletion"""

def is_recursive_empty(input_string, target_string):
    if not input_string:
        return target_string == ""

    return is_recursive_empty(input_string[1:], target_string) or \
           is_recursive_empty(input_string[:-1], target_string)

user_input = input("Enter a string: ")
target_string = input("Enter the target string: ")

if is_recursive_empty(user_input, target_string):
    print(f"The string '{user_input}' can become empty by recursive deletion to match '{target_string}'.")
else:
    print(f"The string '{user_input}' cannot become empty by recursive deletion to match '{target_string}'.")

"""29.	Python Counter| Find all duplicate characters in string"""

from collections import Counter

def find_duplicate_characters(input_string):
    char_counts = Counter(input_string)

    duplicates = [char for char, count in char_counts.items() if count > 1]

    return duplicates

user_input = input("Enter a string: ")

result = find_duplicate_characters(user_input)

if result:
    print(f"Duplicate characters in the string: {', '.join(result)}")
else:
    print("No duplicate characters found in the string.")

"""30.	Python – Replace all occurrences of a substring in a string"""

def replace_substring(input_string, old_substring, new_substring):
    result_string = input_string.replace(old_substring, new_substring)

    return result_string

user_input = input("Enter a string: ")
old_substring = input("Enter the substring to replace: ")
new_substring = input("Enter the new substring: ")

result = replace_substring(user_input, old_substring, new_substring)

print(f"Original String: {user_input}")
print(f"String after replacement: {result}")

"""# Dictionary Program

1.	Python – Extract Unique values dictionary values
"""

def extract_unique_values(dictionary):
    unique_values = {value for values in dictionary.values() for value in values}

    return list(unique_values)

my_dict = {'a': [1, 2, 3], 'b': [2, 3, 4], 'c': [3, 4, 5]}

result = extract_unique_values(my_dict)

print(f"Original Dictionary: {my_dict}")
print(f"Unique Values: {result}")

"""2.	Python program to find the sum of all items in a dictionary"""

def sum_of_dictionary_values(dictionary):
    total_sum = sum(dictionary.values())

    return total_sum

my_dict = {'a': 10, 'b': 20, 'c': 30}

result = sum_of_dictionary_values(my_dict)

print(f"Original Dictionary: {my_dict}")
print(f"Sum of Values: {result}")

"""3.	Python | Ways to remove a key from dictionary"""

def remove_key_using_del(dictionary, key_to_remove):
    if key_to_remove in dictionary:
        del dictionary[key_to_remove]

my_dict = {'a': 1, 'b': 2, 'c': 3}
key_to_remove = 'b'

remove_key_using_del(my_dict, key_to_remove)
print(f"After removing key '{key_to_remove}': {my_dict}")

"""4.	Ways to sort list of dictionaries by values in Python – Using itemgetter"""

from operator import itemgetter

def sort_list_of_dicts_by_values(input_list, key_to_sort_by):
    sorted_list = sorted(input_list, key=itemgetter(key_to_sort_by))

    return sorted_list

list_of_dicts = [{'name': 'Alice', 'age': 25, 'score': 90},
                 {'name': 'Bob', 'age': 30, 'score': 80},
                 {'name': 'Charlie', 'age': 22, 'score': 95}]

key_to_sort_by = 'score'

sorted_list = sort_list_of_dicts_by_values(list_of_dicts, key_to_sort_by)

print(f"Original List of Dicts: {list_of_dicts}")
print(f"Sorted List of Dicts by '{key_to_sort_by}': {sorted_list}")

"""5.	Ways to sort list of dictionaries by values in Python – Using lambda function"""

def sort_list_of_dicts_by_values(input_list, key_to_sort_by):
    sorted_list = sorted(input_list, key=lambda x: x[key_to_sort_by])

    return sorted_list

list_of_dicts = [{'name': 'Alice', 'age': 25, 'score': 90},
                 {'name': 'Bob', 'age': 30, 'score': 80},
                 {'name': 'Charlie', 'age': 22, 'score': 95}]

key_to_sort_by = 'score'

sorted_list = sort_list_of_dicts_by_values(list_of_dicts, key_to_sort_by)

print(f"Original List of Dicts: {list_of_dicts}")
print(f"Sorted List of Dicts by '{key_to_sort_by}': {sorted_list}")

"""6.	Python | Merging two Dictionaries"""

def merge_dicts_using_update(dict1, dict2):
    merged_dict = dict1.copy()

    merged_dict.update(dict2)

    return merged_dict

dict1 = {'a': 1, 'b': 2}
dict2 = {'b': 3, 'c': 4}

merged_dict = merge_dicts_using_update(dict1, dict2)

print(f"Original Dictionary 1: {dict1}")
print(f"Original Dictionary 2: {dict2}")
print(f"Merged Dictionary: {merged_dict}")

"""7.	Python – Convert key-values list to flat dictionary"""

def list_to_flat_dict(key_value_list):
    flat_dict = {key: value for key, value in key_value_list}

    return flat_dict

key_value_list = [('a', 1), ('b', 2), ('c', 3)]

flat_dictionary = list_to_flat_dict(key_value_list)

print(f"Original List of Key-Value Pairs: {key_value_list}")
print(f"Flat Dictionary: {flat_dictionary}")

"""8.	Python – Insertion at the beginning in OrderedDict"""

from collections import OrderedDict

def insert_at_beginning(ordered_dict, key, value):
    ordered_dict.move_to_end(key, last=False)

    ordered_dict[key] = value

my_ordered_dict = OrderedDict([('a', 1), ('b', 2), ('c', 3)])

print("Original OrderedDict:", my_ordered_dict)

insert_at_beginning(my_ordered_dict, 'new_key', 0)

print("OrderedDict after insertion at the beginning:", my_ordered_dict)

"""9.	Python | Check order of character in string using OrderedDict( )"""

from collections import OrderedDict

def check_order_of_characters(input_string, pattern):
    ordered_dict = OrderedDict.fromkeys(input_string)

    return ''.join(ordered_dict.keys()) == pattern

user_input = input("Enter a string: ")
pattern_to_check = input("Enter the pattern to check: ")

result = check_order_of_characters(user_input, pattern_to_check)

if result:
    print(f"The order of characters in '{user_input}' matches the pattern '{pattern_to_check}'.")
else:
    print(f"The order of characters in '{user_input}' does not match the pattern '{pattern_to_check}'.")

"""10.	Dictionary and counter in Python to find winner of election"""

from collections import Counter

def find_election_winner(votes):
    vote_counter = Counter(votes)

    winner = max(vote_counter, key=vote_counter.get)

    return winner

votes = ['Candidate_A', 'Candidate_B', 'Candidate_A', 'Candidate_C', 'Candidate_B', 'Candidate_A']

election_winner = find_election_winner(votes)

print(f"Election Winner: {election_winner}")

"""11.	Python – Append Dictionary Keys and Values ( In order ) in dictionary"""

def append_keys_values(dict1, dict2):
    result_dict = dict1.copy()

    for key, value in dict2.items():
        result_dict[key] = value

    return result_dict

dict1 = {'a': 1, 'b': 2}
dict2 = {'c': 3, 'd': 4}

appended_dict = append_keys_values(dict1, dict2)

print(f"Original Dictionary 1: {dict1}")
print(f"Original Dictionary 2: {dict2}")
print(f"Appended Dictionary: {appended_dict}")

"""12.	Python | Sort Python Dictionaries by Key or Value"""

def sort_dict_by_key(input_dict):
    sorted_dict = dict(sorted(input_dict.items()))

    return sorted_dict

my_dict = {'b': 2, 'a': 1, 'c': 3}

sorted_by_key_dict = sort_dict_by_key(my_dict)

print(f"Original Dictionary: {my_dict}")
print(f"Sorted by Key Dictionary: {sorted_by_key_dict}")

"""13.	Python – Sort Dictionary key and values List"""

def sort_dict_keys(input_dict):
    sorted_keys = sorted(input_dict.keys())

    return sorted_keys

my_dict = {'b': 2, 'a': 1, 'c': 3}

sorted_keys_list = sort_dict_keys(my_dict)

print(f"Original Dictionary: {my_dict}")
print(f"Sorted Keys List: {sorted_keys_list}")

"""14.	Handling missing keys in Python dictionaries"""

my_dict = {'a': 1, 'b': 2, 'c': 3}

value = my_dict.get('d', 0)

print("Value for key 'd':", value)

"""15.	Python dictionary with keys having multiple inputs"""

multi_input_dict = {('John', 'Doe'): 25, ('Alice', 'Smith'): 30, ('Bob', 'Johnson'): 28}

age_john_doe = multi_input_dict[('John', 'Doe')]
age_alice_smith = multi_input_dict[('Alice', 'Smith')]

print(f"Age of John Doe: {age_john_doe}")
print(f"Age of Alice Smith: {age_alice_smith}")

"""16.	Print anagrams together in Python using List and Dictionary"""

def group_anagrams(words):
    anagram_dict = {}

    for word in words:
        sorted_chars_tuple = tuple(sorted(word))

        anagram_dict.setdefault(sorted_chars_tuple, []).append(word)

    return list(anagram_dict.values())

word_list = ['listen', 'silent', 'enlist', 'heart', 'earth', 'rat']

anagram_groups = group_anagrams(word_list)

print("Anagram Groups:")
for group in anagram_groups:
    print(group)

"""17.	K’th Non-repeating Character in Python using List Comprehension and OrderedDict"""

from collections import OrderedDict

def kth_non_repeating_char(input_str, k):
    char_count = OrderedDict()

    for char in input_str:
        char_count[char] = char_count.get(char, 0) + 1

    kth_non_repeating = [char for char, count in char_count.items() if count == 1][:k]

    return kth_non_repeating[-1] if kth_non_repeating else None

input_string = "programming"
k_value = 2

result = kth_non_repeating_char(input_string, k_value)

if result:
    print(f"The {k_value}th non-repeating character is: {result}")
else:
    print(f"There is no {k_value}th non-repeating character.")

"""18.	Check if binary representations of two numbers are anagram"""

def are_binary_anagrams(num1, num2):
    binary_str1 = bin(num1)[2:]
    binary_str2 = bin(num2)[2:]

    return binary_str1.count('1') == binary_str2.count('1') and \
           binary_str1.count('0') == binary_str2.count('0')

number1 = 18
number2 = 9

result = are_binary_anagrams(number1, number2)

if result:
    print(f"The binary representations of {number1} and {number2} are anagrams.")
else:
    print(f"The binary representations of {number1} and {number2} are not anagrams.")

"""19.	Python Counter to find the size of largest subset of anagram words"""

from collections import Counter

def largest_anagram_subset(words):
    anagram_counter = Counter()

    for word in words:
        sorted_word = ''.join(sorted(word))
        anagram_counter[sorted_word] += 1

    max_count = max(anagram_counter.values(), default=0)

    return max_count

word_list = ['listen', 'silent', 'enlist', 'heart', 'earth', 'rat']

result = largest_anagram_subset(word_list)

print(f"The size of the largest subset of anagram words is: {result}")

"""20.	Python | Remove all duplicates words from a given sentence"""

def remove_duplicate_words(sentence):
    words = sentence.split()

    unique_words = set()

    result_words = []

    for word in words:
        if word not in unique_words:
            unique_words.add(word)
            result_words.append(word)

    result_sentence = ' '.join(result_words)

    return result_sentence

input_sentence = "Python is great and Python is easy to learn"

result = remove_duplicate_words(input_sentence)

print(f"Original Sentence: {input_sentence}")
print(f"Sentence without Duplicate Words: {result}")

"""21.	Python Dictionary to find mirror characters in a string"""

def find_mirror_characters(input_str):
    mirror_dict = {'A': 'A', 'B': 'N', 'C': 'C', 'D': 'P', 'E': '3',
                   'F': 'F', 'G': 'G', 'H': 'H', 'I': 'I', 'J': 'L',
                   'K': '2', 'L': 'J', 'M': 'M', 'N': 'B', 'O': 'O',
                   'P': 'D', 'Q': 'Q', 'R': 'R', 'S': '5', 'T': 'T',
                   'U': 'U', 'V': 'V', 'W': 'W', 'X': 'X', 'Y': 'Y',
                   'Z': 'Z', '1': '1', '2': 'K', '3': 'E', '4': '4',
                   '5': 'S', '6': '9', '7': '7', '8': '8', '9': '6', '0': '0'}

    mirror_characters = []

    for char in input_str:
        mirror_char = mirror_dict.get(char)
        if mirror_char is not None and mirror_char == char:
            mirror_characters.append(char)

    return mirror_characters

input_string = "MIRROR"

result = find_mirror_characters(input_string)

print(f"Original String: {input_string}")
print(f"Mirror Characters: {result}")

"""22.	Counting the frequencies in a list using dictionary in Python"""

def count_frequencies(input_list):
    frequency_dict = {}

    for element in input_list:
        frequency_dict[element] = frequency_dict.get(element, 0) + 1

    return frequency_dict

my_list = [1, 2, 3, 1, 2, 1, 3, 4, 5, 4, 4, 5, 5]

result = count_frequencies(my_list)

print(f"Original List: {my_list}")
print(f"Frequencies: {result}")

"""23.	Python | Convert a list of Tuples into Dictionary"""

def convert_to_dictionary(tuple_list):
    result_dict = {key: value for key, value in tuple_list}

    return result_dict

tuple_list = [('a', 1), ('b', 2), ('c', 3), ('d', 4)]

result_dict = convert_to_dictionary(tuple_list)

print(f"Original List of Tuples: {tuple_list}")
print(f"Converted Dictionary: {result_dict}")

"""24.	Python counter and dictionary intersection example (Make a string using deletion and rearrangement)"""

from collections import Counter

def can_rearrange_to_match(s1, s2):
    counter_s1 = Counter(s1)
    counter_s2 = Counter(s2)

    common_chars = counter_s1 & counter_s2

    return all(counter_s1[char] >= count for char, count in common_chars.items())

string1 = "abcd"
string2 = "abc"

result = can_rearrange_to_match(string1, string2)

if result:
    print(f"You can rearrange '{string1}' to match '{string2}'.")
else:
    print(f"You cannot rearrange '{string1}' to match '{string2}'.")

"""25.	Python dictionary, set and counter to check if frequencies can become same"""

from collections import Counter

def can_make_frequencies_same(input_str):
    char_count = Counter(input_str)

    freq_count = Counter(char_count.values())

    return len(freq_count) == 1 or (len(freq_count) == 2 and (1 in freq_count.values() or abs(freq_count.most_common(2)[0][0] - freq_count.most_common(2)[1][0]) == 1))

input_string = "xyyzz"

result = can_make_frequencies_same(input_string)

if result:
    print(f"Frequencies can become the same in the string '{input_string}'.")
else:
    print(f"Frequencies cannot become the same in the string '{input_string}'.")

"""26.	Scraping And Finding Ordered Words In A Dictionary using Python"""

import requests
from bs4 import BeautifulSoup

def find_ordered_words(url):
    response = requests.get(url)

    if response.status_code == 200:
        soup = BeautifulSoup(response.text, 'html.parser')

        ordered_words_container = soup.find('div', {'class': 'dictionary-entry-wrapper'})

        if ordered_words_container:
            ordered_words = ordered_words_container.get_text().strip()
            print(f"Ordered Words: {ordered_words}")
        else:
            print("Unable to find ordered words on the page.")
    else:
        print(f"Failed to retrieve content. Status code: {response.status_code}")

dictionary_url = 'https://www.merriam-webster.com/dictionary/example'
find_ordered_words(dictionary_url)

"""27.	Possible Words using given characters in Python"""

def find_possible_words(chars, word_list):
    possible_words = []

    for word in word_list:
        if all(word.count(char) <= chars.count(char) for char in set(word)):
            possible_words.append(word)

    return possible_words

given_characters = 'poeatrl'
word_list = ['apple', 'pear', 'table', 'later', 'pole', 'port', 'plate']

result = find_possible_words(given_characters, word_list)

print(f"Given Characters: {given_characters}")
print(f"Possible Words: {result}")

"""28.	Python – Keys associated with Values in Dictionary
Tuple Programs:
"""

def keys_for_value(dictionary, value):
    return [key for key, val in dictionary.items() if val == value]

my_dict = {'a': 1, 'b': 2, 'c': 1, 'd': 3, 'e': 2}

value_to_find = 2
keys_associated = keys_for_value(my_dict, value_to_find)

print(f"Keys associated with the value {value_to_find}: {keys_associated}")

def values_and_keys(dictionary):
    return [(val, [key for key, v in dictionary.items() if v == val]) for val in set(dictionary.values())]

my_dict = {'a': 1, 'b': 2, 'c': 1, 'd': 3, 'e': 2}

result = values_and_keys(my_dict)

print("Values and their associated keys:")
for val, keys in result:
    print(f"{val}: {keys}")

"""# Tuple Programing

1.	Python program to Find the size of a Tuple
"""

import sys

def size_of_tuple(my_tuple):
    return sys.getsizeof(my_tuple)

my_tuple = (1, 2, 'three', 4.0, [5, 6])

size = size_of_tuple(my_tuple)

print(f"The size of the tuple is: {size} bytes")

"""2.	Python – Maximum and Minimum K elements in Tuple"""

import heapq

def max_min_k_elements(my_tuple, k):
    max_k = heapq.nlargest(k, my_tuple)

    min_k = heapq.nsmallest(k, my_tuple)

    return max_k, min_k

my_tuple = (5, 8, 2, 10, 1, 7)
k_value = 3

max_k_elements, min_k_elements = max_min_k_elements(my_tuple, k_value)

print(f"The {k_value} largest elements: {max_k_elements}")
print(f"The {k_value} smallest elements: {min_k_elements}")

"""3.	Create a list of tuples from given list having number and its cube in each tuple"""

def create_tuple_list(numbers):
    tuple_list = [(num, num**3) for num in numbers]
    return tuple_list

given_list = [1, 2, 3, 4, 5]

result = create_tuple_list(given_list)

print(f"Original List: {given_list}")
print(f"List of Tuples (Number, Cube): {result}")

"""4.	Python – Adding Tuple to List and vice – versa"""

def add_tuple_to_list(my_list, my_tuple):
    my_list.append(my_tuple)
    return my_list

original_list = [1, 2, 3]
new_tuple = (4, 5, 6)

result_list = add_tuple_to_list(original_list, new_tuple)

print(f"Original List: {original_list}")
print(f"New List after adding Tuple: {result_list}")

def add_list_to_tuple(my_tuple, my_list):
    new_tuple = (*my_tuple, *my_list)
    return new_tuple

original_tuple = (1, 2, 3)
new_list = [4, 5, 6]

result_tuple = add_list_to_tuple(original_tuple, new_list)

print(f"Original Tuple: {original_tuple}")
print(f"New Tuple after adding List: {result_tuple}")

"""5.	Python – Closest Pair to Kth index element in Tuple"""

def closest_pair_to_kth_index(my_tuple, k):
    if len(my_tuple) < 2:
        return None

    differences = [(abs(my_tuple[i] - my_tuple[k]), i) for i in range(len(my_tuple)) if i != k]

    closest_pair = min(differences, key=lambda x: x[0])

    return my_tuple[closest_pair[1]], my_tuple[k]

my_tuple = (1, 4, 7, 10, 13)
k_value = 2

result = closest_pair_to_kth_index(my_tuple, k_value)

print(f"Original Tuple: {my_tuple}")
print(f"Closest Pair to the {k_value}th index element: {result}")

"""6.	Python – Join Tuples if similar initial element"""

def join_tuples_with_similar_initial_element(tuple_list):
    result_list = []

    grouped_tuples = {}
    for my_tuple in tuple_list:
        key = my_tuple[0]
        if key not in grouped_tuples:
            grouped_tuples[key] = []
        grouped_tuples[key].append(my_tuple)


    for key, tuples in grouped_tuples.items():
        if len(tuples) > 1:
            joined_tuple = tuple(sum((list(t) for t in tuples), []))
            result_list.append(joined_tuple)
        else:
            result_list.extend(tuples)

    return result_list


tuple_list = [(1, 'apple'), (2, 'banana'), (1, 'orange'), (3, 'grape'), (2, 'kiwi')]

result = join_tuples_with_similar_initial_element(tuple_list)

print(f"Original List of Tuples: {tuple_list}")
print(f"Joined Tuples with Similar Initial Element: {result}")

"""7.	Python – Extract digits from Tuple list"""

def extract_digits_from_tuples(tuple_list):
    digit_list = []

    for my_tuple in tuple_list:
        for item in my_tuple:
            if isinstance(item, int) or (isinstance(item, str) and item.isdigit()):
                digit_list.append(int(item))

    return digit_list

tuple_list = [(1, 'apple', 3), ('banana', 2, 'orange'), (3, 'grape', 'kiwi')]

result = extract_digits_from_tuples(tuple_list)

print(f"Original List of Tuples: {tuple_list}")
print(f"Extracted Digits: {result}")

"""8.	Python – All pair combinations of 2 tuples"""

def all_pair_combinations(tuple1, tuple2):
    pairs = [(elem1, elem2) for elem1 in tuple1 for elem2 in tuple2]
    return pairs

tuple1 = (1, 2, 3)
tuple2 = ('a', 'b', 'c')

result = all_pair_combinations(tuple1, tuple2)

print(f"Tuple 1: {tuple1}")
print(f"Tuple 2: {tuple2}")
print(f"All Pair Combinations: {result}")

"""9.	Python – Remove Tuples of Length K"""

def remove_tuples_of_length_k(tuple_list, k):
    result_list = [my_tuple for my_tuple in tuple_list if len(my_tuple) != k]
    return result_list

tuple_list = [(1, 2, 3), ('a', 'b', 'c'), (4, 5), ('x', 'y', 'z', 'w')]

k_value = 3

result = remove_tuples_of_length_k(tuple_list, k_value)

print(f"Original List of Tuples: {tuple_list}")
print(f"List after removing tuples of length {k_value}: {result}")

"""10.	Sort a list of tuples by second Item"""

def sort_by_second_item(tuple_list):
    sorted_list = sorted(tuple_list, key=lambda x: x[1])
    return sorted_list

tuple_list = [(1, 3), (2, 1), (3, 2), (4, 5), (5, 4)]

result = sort_by_second_item(tuple_list)

print(f"Original List of Tuples: {tuple_list}")
print(f"Sorted List by Second Item: {result}")

"""11.	Python program to Order Tuples using external List"""

from operator import itemgetter

def order_tuples_by_external_list(tuple_list, order_list):
    ordered_list = sorted(tuple_list, key=itemgetter(*order_list))
    return ordered_list

tuple_list = [('apple', 3, 'red'), ('banana', 2, 'yellow'), ('grape', 1, 'purple')]
order_list = [2, 1, 0]

result = order_tuples_by_external_list(tuple_list, order_list)

print(f"Original List of Tuples: {tuple_list}")
print(f"Ordered List of Tuples: {result}")

"""12.	Python – Flatten tuple of List to tuple

"""

from itertools import chain

def flatten_tuple_of_lists(input_tuple):
    flattened_tuple = tuple(chain(*input_tuple))
    return flattened_tuple

tuple_of_lists = ([1, 2, 3], ['a', 'b'], [4, 5])

result = flatten_tuple_of_lists(tuple_of_lists)

print(f"Original Tuple of Lists: {tuple_of_lists}")
print(f"Flattened Tuple: {result}")

"""13.	Python – Convert Nested Tuple to Custom Key Dictionary"""

def nested_tuple_to_dict(nested_tuple, keys):
    if len(keys) == 1:
        return {keys[0]: nested_tuple}
    else:
        return {keys[0]: nested_tuple_to_dict(nested_tuple, keys[1:])}

nested_tuple = ((1, 2), (3, 4), (5, 6))
custom_keys = ['first', 'second', 'third']

result = nested_tuple_to_dict(nested_tuple, custom_keys)

print(f"Original Nested Tuple: {nested_tuple}")
print(f"Converted Dictionary: {result}")